/**
 * Video Download ‚Üí Telegram Bot (Node.js)
 * ----------------------------------------
 * –§—É–Ω–∫—Ü–∏–∏:
 *  1) –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–∞–º (YouTube, Instagram, TikTok –∏ –¥—Ä.)
 *  2) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ê–≤—Ç–æ-—Å–∏–Ω–∫ –Ω–æ–≤—ã—Ö Shorts –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø–æ RSS.
 *
 * –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
 *  - Node.js 18+
 *  - ffmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ
 *
 * –£—Å—Ç–∞–Ω–æ–≤–∫–∞:
 *  npm install telegraf yt-dlp-exec rss-parser dotenv
 *
 * –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env):
 *  TELEGRAM_BOT_TOKEN=123456:ABC...
 *  TARGET_CHAT_ID=-1001234567890      # –¥–ª—è –∞–≤—Ç–æ—Å–∏–Ω–∫–∞
 *  YT_CHANNEL_ID=UCxxxxxxxxxxxxxxxxxx # –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –∞–≤—Ç–æ—Å–∏–Ω–∫
 *  POLL_INTERVAL=300                  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ RSS (—Å–µ–∫)
 *  MAX_DURATION_SECONDS=75            # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–∏–¥–µ–æ
 *  MAX_HEIGHT=1080                    # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—ã—Å–æ—Ç–µ –≤–∏–¥–µ–æ
 */

import { Telegraf } from 'telegraf';
import { execFile } from 'child_process';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import path from 'path';
import fs from 'fs';
import dotenv from 'dotenv';
import Parser from 'rss-parser';
import ytdlp from 'yt-dlp-exec';

const __dirname = dirname(fileURLToPath(import.meta.url));
dotenv.config();

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TARGET_CHAT_ID = process.env.TARGET_CHAT_ID;
const YT_CHANNEL_ID = process.env.YT_CHANNEL_ID;
const POLL_INTERVAL = Number(process.env.POLL_INTERVAL || 300);
const MAX_DURATION = Number(process.env.MAX_DURATION_SECONDS || 75);
const MAX_HEIGHT = Number(process.env.MAX_HEIGHT || 1080);

if (!BOT_TOKEN) {
  console.error('Set TELEGRAM_BOT_TOKEN in .env');
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);
const parser = new Parser();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Å—Å—ã–ª–∫–∏
function detectLinkType(url) {
  const urlLower = url.toLowerCase();
  
  if (urlLower.includes('youtube.com') || urlLower.includes('youtu.be')) {
    return 'youtube';
  } else if (urlLower.includes('instagram.com')) {
    return 'instagram';
  } else if (urlLower.includes('tiktok.com')) {
    return 'tiktok';
  } else if (urlLower.includes('twitter.com') || urlLower.includes('x.com')) {
    return 'twitter';
  } else if (urlLower.includes('vk.com')) {
    return 'vk';
  }
  
  return 'other';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–æ–π
function isValidUrl(text) {
  try {
    new URL(text);
    return true;
  } catch {
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–∏–¥–µ–æ
function getVideoFormat(linkType, maxHeight) {
  const formats = [];
  
  if (linkType === 'youtube') {
    // –î–ª—è YouTube –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    formats.push(`best[height<=${maxHeight}][ext=mp4]`);
    formats.push(`best[height<=${maxHeight}]`);
    formats.push(`worst[height<=${maxHeight}][ext=mp4]`);
    formats.push(`bestvideo[height<=${maxHeight}]+bestaudio/best[height<=${maxHeight}]`);
    formats.push('best[ext=mp4]');
    formats.push('worst[ext=mp4]');
    formats.push('best');
    formats.push('worst');
  } else if (linkType === 'instagram') {
    // –î–ª—è Instagram –ø—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ª—É—á—à–µ
    formats.push('best[ext=mp4]');
    formats.push('best');
    formats.push('worst');
  } else {
    // –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    formats.push(`best[height<=${maxHeight}][ext=mp4]`);
    formats.push(`best[height<=${maxHeight}]`);
    formats.push('best[ext=mp4]');
    formats.push('best');
    formats.push('worst');
  }
  
  return formats.join('/');
}

async function downloadVideo(url) {
  const linkType = detectLinkType(url);
  const videoFormat = getVideoFormat(linkType, MAX_HEIGHT);
  
  let ytdlpOptions = {
    dumpSingleJson: true,
    noWarnings: true,
    noCallHome: true,
    noCheckCertificates: true,
    preferFreeFormats: true,
    format: videoFormat,
  };

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è YouTube
  if (linkType === 'youtube') {
    ytdlpOptions = {
      ...ytdlpOptions,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π YouTube
      addHeader: ['User-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'],
      extractFlat: false,
      writeInfoJson: false,
      writeDescription: false,
      writeThumbnail: false,
      writeAllThumbnails: false,
    };
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Instagram
  if (linkType === 'instagram') {
    ytdlpOptions = {
      ...ytdlpOptions,
      addHeader: ['User-Agent:Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'],
      cookiesFromBrowser: 'chrome',
      noCheckCertificates: true,
    };
  }

  let info;
  let finalFormat = videoFormat;
  
  // –ú–∞—Å—Å–∏–≤ fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
  const fallbackStrategies = [
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    () => ({ ...ytdlpOptions }),
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ü—Ä–æ—Å—Ç–æ–π best —Ñ–æ—Ä–º–∞—Ç
    () => ({ ...ytdlpOptions, format: 'best' }),
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: Worst —Ñ–æ—Ä–º–∞—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –∫–æ–≥–¥–∞ best –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
    () => ({ ...ytdlpOptions, format: 'worst' }),
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—ã—Å–æ—Ç–µ
    () => ({ ...ytdlpOptions, format: 'best[ext=mp4]/best' }),
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 5: –õ—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    () => ({ 
      ...ytdlpOptions, 
      format: 'best/worst',
      preferFreeFormats: false 
    }),
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 6: –î–ª—è Instagram –±–µ–∑ cookies
    () => {
      const opts = { ...ytdlpOptions, format: 'best' };
      if (linkType === 'instagram') {
        delete opts.cookiesFromBrowser;
      }
      return opts;
    },
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è 7: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    () => ({
      dumpSingleJson: true,
      noWarnings: true,
      format: 'best',
    })
  ];

  // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
  for (let i = 0; i < fallbackStrategies.length; i++) {
    try {
      const currentOptions = fallbackStrategies[i]();
      console.log(`Trying strategy ${i + 1}/${fallbackStrategies.length}: format=${currentOptions.format}`);
      
      info = await ytdlp(url, currentOptions);
      finalFormat = currentOptions.format;
      ytdlpOptions = currentOptions; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      console.log(`Strategy ${i + 1} succeeded!`);
      break;
      
    } catch (error) {
      console.log(`Strategy ${i + 1} failed: ${error.message}`);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      if (i === fallbackStrategies.length - 1) {
        if (linkType === 'instagram') {
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ Instagram. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.`);
        } else if (error.message.includes('Requested format is not available')) {
          throw new Error(`–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.`);
        } else if (error.message.includes('Private video')) {
          throw new Error(`–í–∏–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.`);
        } else if (error.message.includes('Video unavailable')) {
          throw new Error(`–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.`);
        } else {
          throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ: ${error.message}`);
        }
      }
    }
  }

  const duration = info.duration || 0;
  if (duration > MAX_DURATION) {
    throw new Error(`–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: ${duration}s > ${MAX_DURATION}s`);
  }

  const outFile = path.join(__dirname, `${info.id}.mp4`);
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å —Ç–µ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–ª
  let downloadOptions = {
    output: outFile,
    format: finalFormat,
    noWarnings: true,
    noCallHome: true,
    noCheckCertificates: true,
  };

  // –ö–æ–ø–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  if (ytdlpOptions.addHeader) {
    downloadOptions.addHeader = ytdlpOptions.addHeader;
  }
  if (ytdlpOptions.cookiesFromBrowser) {
    downloadOptions.cookiesFromBrowser = ytdlpOptions.cookiesFromBrowser;
  }

  try {
    await ytdlp(url, downloadOptions);
  } catch (downloadError) {
    console.log('Download failed, trying with simplest options...');
    
    // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
    const simpleDownloadOptions = {
      output: outFile,
      format: 'best',
      noWarnings: true,
    };
    
    await ytdlp(url, simpleDownloadOptions);
  }

  return { info, file: outFile };
}

async function sendVideo(ctx, { info, file }) {
  const platform = detectLinkType(info.webpage_url || '');
  const platformName = {
    youtube: 'YouTube',
    instagram: 'Instagram', 
    tiktok: 'TikTok',
    twitter: 'Twitter',
    vk: 'VK',
    other: '–í–∏–¥–µ–æ'
  }[platform] || '–í–∏–¥–µ–æ';

  let caption = `*${info.title || '–í–∏–¥–µ–æ'}*`;
  
  if (info.duration) {
    caption += `\n‚è± ${info.duration}s`;
  }
  
  if (info.uploader) {
    caption += ` ‚Ä¢ üë§ ${info.uploader}`;
  }
  
  if (info.webpage_url) {
    caption += `\n\n[${platformName}](${info.webpage_url})`;
  }

  await ctx.replyWithVideo({ source: file }, {
    caption,
    parse_mode: 'Markdown',
    supports_streaming: true,
  });
  fs.unlink(file, () => {});
}

bot.start((ctx) => ctx.reply('–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏ —è –µ–≥–æ —Å–∫–∞—á–∞—é –¥–ª—è —Ç–µ–±—è! üé¨\n\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é: YouTube, Instagram, TikTok, Twitter, VK –∏ –¥—Ä—É–≥–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.'));

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const text = ctx.message.text.trim();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫—É
  const urls = text.match(/https?:\/\/[^\s]+/g);
  
  if (!urls || urls.length === 0) {
    return ctx.reply('–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è –µ–≥–æ —Å–∫–∞—á–∞—é! üìπ');
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
  const url = urls[0];
  
  if (!isValidUrl(url)) {
    return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü—Ä–æ–≤–µ—Ä—å –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.');
  }

  const linkType = detectLinkType(url);
  const platformEmoji = {
    youtube: 'üì∫',
    instagram: 'üì∏',
    tiktok: 'üéµ',
    twitter: 'üê¶',
    vk: 'üîµ',
    other: 'üé¨'
  };

  try {
    await ctx.reply(`${platformEmoji[linkType]} –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...`);
    const result = await downloadVideo(url);
    await sendVideo(ctx, result);
    await ctx.reply('–ì–æ—Ç–æ–≤–æ ‚úÖ');
  } catch (e) {
    console.error('Download error:', e.message);
    
    // –ë–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ üòî';
    
    if (e.message.includes('Instagram') && e.message.includes('empty media response')) {
      errorMessage = 'Instagram –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–ª–∏ –≤–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω–æ.';
    } else if (e.message.includes('Instagram') && e.message.includes('–ø—Ä–∏–≤–∞—Ç–Ω–æ–µ')) {
      errorMessage = e.message;
    } else if (e.message.includes('—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ')) {
      errorMessage = e.message;
    } else if (e.message.includes('–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ')) {
      errorMessage = e.message;
    } else if (e.message.includes('Private video')) {
      errorMessage = '–í–∏–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.';
    } else if (e.message.includes('Video unavailable')) {
      errorMessage = '–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.';
    } else if (e.message.includes('Requested format is not available')) {
      errorMessage = '–§–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.';
    } else if (e.message.includes('Sign in to confirm your age')) {
      errorMessage = '–í–∏–¥–µ–æ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.';
    }
    
    ctx.reply(errorMessage);
  }
});

async function autoSync() {
  if (!YT_CHANNEL_ID || !TARGET_CHAT_ID) return;
  const rssUrl = `https://www.youtube.com/feeds/videos.xml?channel_id=${YT_CHANNEL_ID}`;
  const seen = new Set();

  setInterval(async () => {
    try {
      const feed = await parser.parseURL(rssUrl);
      for (const entry of feed.items) {
        const id = entry.id?.split(':').pop();
        if (!id || seen.has(id)) continue;

        const url = `https://www.youtube.com/watch?v=${id}`;
        try {
          const result = await downloadVideo(url);
          await bot.telegram.sendVideo(TARGET_CHAT_ID, { source: result.file }, {
            caption: `*${result.info.title}*\n‚è± ${result.info.duration}s\n[YouTube](${result.info.webpage_url})`,
            parse_mode: 'Markdown',
          });
          fs.unlink(result.file, () => {});
          seen.add(id);
          console.log('Posted new video', id);
        } catch (e) {
          console.log('Skip', id, e.message);
        }
      }
    } catch (err) {
      console.error('RSS error', err);
    }
  }, POLL_INTERVAL * 1000);
}

autoSync();

bot.launch();
console.log('Bot is running‚Ä¶');